#include "vm.h"
CF_BEGIN

fr_Obj sys_Obj_trap(fr_Env env, fr_Obj self, fr_Obj name, fr_Obj args);
fr_Bool sys_Obj_isImmutable(fr_Env env, fr_Obj self);
fr_Obj sys_Enum_doFromStr(fr_Env env, fr_Obj type, fr_Obj name, fr_Bool checked);
void sys_Array_make(fr_Env env, fr_Obj self, fr_Int size);
fr_Int sys_Array_size(fr_Env env, fr_Obj self);
fr_Obj sys_Array_get(fr_Env env, fr_Obj self, fr_Int pos);
void sys_Array_set(fr_Env env, fr_Obj self, fr_Int pos, fr_Obj val);
fr_Obj sys_Array_realloc(fr_Env env, fr_Obj array, fr_Int newSize);
void sys_Array_arraycopy(fr_Env env, fr_Obj src, fr_Int srcOffset, fr_Obj dest, fr_Int destOffset, fr_Int length);
void sys_Array_fill(fr_Env env, fr_Obj array, fr_Obj val, fr_Int times);
void sys_Array_finalize(fr_Env env, fr_Obj self);
fr_Bool sys_Bool_equals(fr_Env env, fr_Bool self, fr_Obj obj);
fr_Bool sys_Bool_not(fr_Env env, fr_Bool self);
fr_Bool sys_Bool_and(fr_Env env, fr_Bool self, fr_Bool b);
fr_Bool sys_Bool_or(fr_Env env, fr_Bool self, fr_Bool b);
fr_Bool sys_Bool_xor(fr_Env env, fr_Bool self, fr_Bool b);
fr_Float sys_Float_makeBits(fr_Env env, fr_Int bits);
fr_Float sys_Float_makeBits32(fr_Env env, fr_Int bits);
fr_Float sys_Float_fromStr(fr_Env env, fr_Obj s, fr_Bool checked);
fr_Float sys_Float_random(fr_Env env);
fr_Bool sys_Float_equals(fr_Env env, fr_Float self, fr_Obj obj);
fr_Bool sys_Float_isNaN(fr_Env env, fr_Float self);
fr_Float sys_Float_negate(fr_Env env, fr_Float self);
fr_Float sys_Float_mult(fr_Env env, fr_Float self, fr_Float b);
fr_Float sys_Float_multInt(fr_Env env, fr_Float self, fr_Int b);
fr_Float sys_Float_div(fr_Env env, fr_Float self, fr_Float b);
fr_Float sys_Float_divInt(fr_Env env, fr_Float self, fr_Int b);
fr_Float sys_Float_mod(fr_Env env, fr_Float self, fr_Float b);
fr_Float sys_Float_modInt(fr_Env env, fr_Float self, fr_Int b);
fr_Float sys_Float_plus(fr_Env env, fr_Float self, fr_Float b);
fr_Float sys_Float_plusInt(fr_Env env, fr_Float self, fr_Int b);
fr_Float sys_Float_minus(fr_Env env, fr_Float self, fr_Float b);
fr_Float sys_Float_minusInt(fr_Env env, fr_Float self, fr_Int b);
fr_Int sys_Float_bits(fr_Env env, fr_Float self);
fr_Int sys_Float_bits32(fr_Env env, fr_Float self);
fr_Obj sys_Float_toStr(fr_Env env, fr_Float self);
fr_Int sys_Float_toInt(fr_Env env, fr_Float self);
fr_Obj sys_Float_toLocale(fr_Env env, fr_Float self, fr_Obj pattern);
fr_Obj sys_Func_call(fr_Env env, fr_Obj self, fr_Obj a, fr_Obj b, fr_Obj c, fr_Obj d, fr_Obj e, fr_Obj f, fr_Obj g, fr_Obj h);
fr_Obj sys_BindFunc_call(fr_Env env, fr_Obj self, fr_Obj a, fr_Obj b, fr_Obj c, fr_Obj d, fr_Obj e, fr_Obj f, fr_Obj g, fr_Obj h);
fr_Int sys_Int_fromStr(fr_Env env, fr_Obj s, fr_Int radix, fr_Bool checked);
fr_Int sys_Int_random(fr_Env env, fr_Obj r);
void sys_Int_privateMake(fr_Env env, fr_Int self);
fr_Bool sys_Int_equals(fr_Env env, fr_Int self, fr_Obj obj);
fr_Int sys_Int_compare(fr_Env env, fr_Int self, fr_Obj obj);
fr_Int sys_Int_negate(fr_Env env, fr_Int self);
fr_Int sys_Int_increment(fr_Env env, fr_Int self);
fr_Int sys_Int_decrement(fr_Env env, fr_Int self);
fr_Int sys_Int_mult(fr_Env env, fr_Int self, fr_Int b);
fr_Float sys_Int_multFloat(fr_Env env, fr_Int self, fr_Float b);
fr_Int sys_Int_div(fr_Env env, fr_Int self, fr_Int b);
fr_Float sys_Int_divFloat(fr_Env env, fr_Int self, fr_Float b);
fr_Int sys_Int_mod(fr_Env env, fr_Int self, fr_Int b);
fr_Float sys_Int_modFloat(fr_Env env, fr_Int self, fr_Float b);
fr_Int sys_Int_plus(fr_Env env, fr_Int self, fr_Int b);
fr_Float sys_Int_plusFloat(fr_Env env, fr_Int self, fr_Float b);
fr_Int sys_Int_minus(fr_Env env, fr_Int self, fr_Int b);
fr_Float sys_Int_minusFloat(fr_Env env, fr_Int self, fr_Float b);
fr_Int sys_Int_not(fr_Env env, fr_Int self);
fr_Int sys_Int_and(fr_Env env, fr_Int self, fr_Int b);
fr_Int sys_Int_or(fr_Env env, fr_Int self, fr_Int b);
fr_Int sys_Int_xor(fr_Env env, fr_Int self, fr_Int b);
fr_Int sys_Int_shiftl(fr_Env env, fr_Int self, fr_Int b);
fr_Int sys_Int_shiftr(fr_Env env, fr_Int self, fr_Int b);
fr_Int sys_Int_shifta(fr_Env env, fr_Int self, fr_Int b);
fr_Int sys_Int_pow(fr_Env env, fr_Int self, fr_Int pow);
fr_Obj sys_Int_toStr(fr_Env env, fr_Int self);
fr_Obj sys_Int_toHex(fr_Env env, fr_Int self, fr_Int width);
fr_Obj sys_Int_toRadix(fr_Env env, fr_Int self, fr_Int radix, fr_Int width);
fr_Obj sys_Int_toChar(fr_Env env, fr_Int self);
fr_Obj sys_Int_toCode(fr_Env env, fr_Int self, fr_Int base);
fr_Float sys_Int_toFloat(fr_Env env, fr_Int self);
fr_Int sys_NativeC_toId(fr_Env env, fr_Obj self);
fr_Obj sys_NativeC_typeName(fr_Env env, fr_Obj self);
void sys_NativeC_print(fr_Env env, fr_Obj utf8);
void sys_NativeC_printErr(fr_Env env, fr_Obj utf8);
fr_Obj sys_NativeC_stackTrace(fr_Env env);
void sys_Ptr_make(fr_Env env, fr_Ptr self);
fr_Ptr sys_Ptr_stackAlloc(fr_Env env, fr_Int size);
fr_Obj sys_Ptr_load(fr_Env env, fr_Ptr self);
void sys_Ptr_store(fr_Env env, fr_Ptr self, fr_Obj v);
fr_Ptr sys_Ptr_plus(fr_Env env, fr_Ptr self, fr_Int b);
void sys_Ptr_set(fr_Env env, fr_Ptr self, fr_Int index, fr_Obj item);
fr_Obj sys_Ptr_get(fr_Env env, fr_Ptr self, fr_Int index);
fr_Obj sys_Str_format(fr_Env env, fr_Obj format, fr_Obj args);

CF_END
